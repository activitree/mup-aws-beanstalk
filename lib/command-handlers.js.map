{"version":3,"sources":["../src/command-handlers.js"],"names":["setup","api","config","getConfig","appConfig","app","bucketName","bucket","appName","instanceProfile","serviceRoleName","serviceRole","trailBucketPrefix","trailName","deregisterRuleName","environmentName","environment","eventTargetRoleName","eventTargetRole","eventTargetPolicyName","eventTargetPassRoleName","automationDocument","s3","listBuckets","promise","Buckets","region","beanstalkBucketCreated","console","log","rolePolicy","gracefulShutdown","accountId","policy","passPolicy","beanstalk","describeApplications","Applications","find","ApplicationName","params","Description","name","createApplication","existingBucket","trailBucketName","Name","trailBucketCreated","trailNameList","cloudTrail","describeTrails","trailList","length","createParams","S3BucketName","createTrail","createdDocument","DeregisterEvent","createdRule","target","createdTarget","deploy","runCommand","bundlePrefix","version","nextVersion","buildOptions","buildLocation","path","bundlePath","resolvePath","willBuild","getOptions","key","createApplicationVersion","VersionLabel","toString","SourceBundle","S3Bucket","S3Key","updateEnvironment","EnvironmentName","describeEnvironments","EnvironmentNames","Environments","chalk","green","CNAME","longEnvVars","describeConfigurationSettings","ConfigurationSettings","commandHistory","migrated","logs","logsContent","forEach","data","instance","split","process","stdout","write","logsNginx","logsEb","start","describeEnvironmentResources","EnvironmentResources","autoScalingGroup","AutoScalingGroups","minInstances","maxInstances","autoScaling","updateAutoScalingGroup","AutoScalingGroupName","MaxSize","MinSize","DesiredCapacity","stop","restart","restartAppServer","clean","versions","envVersions","promises","i","push","deleteApplicationVersion","DeleteSourceBundle","deleteObject","Bucket","Key","Promise","all","reconfig","env","Status","desiredEbConfig","getSettings","listAvailableSolutionStacks","SolutionStacks","solutionStack","endsWith","createEnvironment","SolutionStackName","OptionSettings","longEnvEnabled","enabled","safeToReconfig","nextEnvVersion","currentEnvVersion","toRemove","toUpdate","OptionsToRemove","events","describeEvents","envEvents","Events","map","ev","EventDate","Message","join","status","describeEnvironmentHealth","AttributeNames","result","describeInstancesHealth","InstanceHealthList","ApplicationMetrics","RequestCount","Duration","StatusCodes","Latency","Color","HealthStatus","Causes","cause","Status2xx","Status3xx","Status4xx","Status5xx","P999","P99","P95","P90","P85","P75","P50","P10","InstanceId","ssl","sslDomains","domains","acm","listCertificates","CertificateSummaryList","found","DomainName","CertificateArn","describeCertificate","Certificate","SubjectAlternativeNames","requestCertificate","shift","certificateArn","emailsProvided","checks","validationOptions","DomainValidationOptions","ValidationEmails","certificate","resolve","setTimeout","ValidationDomain","ValidationStatus","yellow","email"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport {\n  acm,\n  s3,\n  beanstalk,\n  autoScaling,\n  cloudTrail\n} from './aws';\nimport updateSSLConfig from './certificates';\nimport {\n  rolePolicy,\n  trailBucketPolicy,\n  DeregisterEvent,\n  deregisterEventTarget,\n  serviceRole,\n  eventTargetRolePolicy,\n  eventTargetRole,\n  gracefulShutdownAutomationDocument,\n  passRolePolicy\n} from './policies';\nimport upload, { uploadEnvFile } from './upload';\nimport {\n  archiveApp,\n  injectFiles\n} from './prepare-bundle';\nimport {\n  coloredStatusText,\n  ensureBucketExists,\n  ensureInstanceProfileExists,\n  ensureRoleExists,\n  ensureRoleAdded,\n  ensurePoliciesAttached,\n  ensureBucketPolicyAttached,\n  getAccountId,\n  getLogs,\n  logStep,\n  names,\n  tmpBuildPath,\n  shouldRebuild,\n  ensureCloudWatchRule,\n  ensureRuleTargetExists,\n  ensureInlinePolicyAttached,\n  findBucketWithPrefix,\n  createUniqueName,\n  checkLongEnvSafe,\n  createVersionDescription,\n  ensureSsmDocument\n} from './utils';\nimport {\n  largestVersion,\n  largestEnvVersion,\n  ebVersions,\n  oldVersions,\n  oldEnvVersions\n} from './versions';\n\nimport {\n  createDesiredConfig,\n  diffConfig,\n  scalingConfig,\n  scalingConfigChanged\n} from './eb-config';\n\nimport {\n  waitForEnvReady,\n  waitForHealth\n} from './env-ready';\n\nexport async function setup(api) {\n  const config = api.getConfig();\n  const appConfig = config.app;\n\n  const {\n    bucket: bucketName,\n    app: appName,\n    instanceProfile,\n    serviceRole: serviceRoleName,\n    trailBucketPrefix,\n    trailName,\n    deregisterRuleName,\n    environment: environmentName,\n    eventTargetRole: eventTargetRoleName,\n    eventTargetPolicyName,\n    eventTargetPassRoleName,\n    automationDocument\n  } = names(config);\n\n  logStep('=> Setting up');\n\n  // Create bucket if needed\n  const {\n    Buckets\n  } = await s3.listBuckets().promise();\n\n  const beanstalkBucketCreated = await ensureBucketExists(Buckets, bucketName, appConfig.region);\n\n  if (beanstalkBucketCreated) {\n    console.log('  Created Bucket');\n  }\n\n  logStep('=> Ensuring IAM Roles and Instance Profiles are setup');\n\n  // Create role and instance profile\n  await ensureRoleExists(instanceProfile, rolePolicy);\n  await ensureInstanceProfileExists(config, instanceProfile);\n  await ensurePoliciesAttached(config, instanceProfile, [\n    'arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier',\n    'arn:aws:iam::aws:policy/AWSElasticBeanstalkMulticontainerDocker',\n    'arn:aws:iam::aws:policy/AWSElasticBeanstalkWorkerTier',\n    ...appConfig.gracefulShutdown ? ['arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM'] : []\n  ]);\n  await ensureRoleAdded(config, instanceProfile, instanceProfile);\n\n  // Create role used by enhanced health\n  await ensureRoleExists(serviceRoleName, serviceRole);\n  await ensurePoliciesAttached(config, serviceRoleName, [\n    'arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkEnhancedHealth',\n    'arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkService'\n  ]);\n\n  if (appConfig.gracefulShutdown) {\n    const accountId = await getAccountId();\n    const policy = eventTargetRolePolicy(accountId, environmentName, appConfig.region || 'us-east-1');\n    const passPolicy = passRolePolicy(accountId, eventTargetRoleName);\n\n    await ensureRoleExists(eventTargetRoleName, eventTargetRole, true);\n    await ensureInlinePolicyAttached(eventTargetRoleName, eventTargetPolicyName, policy);\n    await ensureInlinePolicyAttached(eventTargetRoleName, eventTargetPassRoleName, passPolicy);\n  }\n\n  // Create beanstalk application if needed\n  const {\n    Applications\n  } = await beanstalk.describeApplications().promise();\n\n  if (!Applications.find(app => app.ApplicationName === appName)) {\n    const params = {\n      ApplicationName: appName,\n      Description: `App \"${appConfig.name}\" managed by Meteor Up`\n    };\n\n    await beanstalk.createApplication(params).promise();\n    console.log('  Created Beanstalk application');\n  }\n\n  if (appConfig.gracefulShutdown) {\n    logStep('=> Ensuring Graceful Shutdown is setup');\n\n    const existingBucket = findBucketWithPrefix(Buckets, trailBucketPrefix);\n    const trailBucketName = existingBucket ?\n      existingBucket.Name :\n      createUniqueName(trailBucketPrefix);\n    const region = appConfig.region || 'us-east-1';\n    const accountId = await getAccountId();\n    const policy = trailBucketPolicy(accountId, trailBucketName);\n\n    const trailBucketCreated = await ensureBucketExists(Buckets, trailBucketName, appConfig.region);\n    await ensureBucketPolicyAttached(trailBucketName, policy);\n\n    if (trailBucketCreated) {\n      console.log('  Created bucket for Cloud Trail');\n    }\n\n    const params = {\n      trailNameList: [\n        trailName\n      ]\n    };\n\n    const {\n      trailList\n    } = await cloudTrail.describeTrails(params).promise();\n\n    if (trailList.length === 0) {\n      const createParams = {\n        Name: trailName,\n        S3BucketName: trailBucketName\n      };\n\n      await cloudTrail.createTrail(createParams).promise();\n\n      console.log('  Created CloudTrail trail');\n    }\n\n    const createdDocument = await ensureSsmDocument(\n      automationDocument,\n      gracefulShutdownAutomationDocument()\n    );\n    if (createdDocument) {\n      console.log('  Created SSM Automation Document');\n    }\n\n    const createdRule = await ensureCloudWatchRule(deregisterRuleName, 'Used by Meteor Up for graceful shutdown', DeregisterEvent);\n\n    if (createdRule) {\n      console.log('  Created Cloud Watch rule');\n    }\n\n    const target = deregisterEventTarget(environmentName, eventTargetRoleName, accountId, region);\n    const createdTarget = await ensureRuleTargetExists(deregisterRuleName, target, accountId);\n\n    if (createdTarget) {\n      console.log('  Created target for Cloud Watch rule');\n    }\n  }\n}\n\nexport async function deploy(api) {\n  await api.runCommand('beanstalk.setup');\n\n  const config = api.getConfig();\n  const {\n    app,\n    bucket,\n    bundlePrefix,\n    environment\n  } = names(config);\n\n\n  const version = await largestVersion(api);\n  const nextVersion = version + 1;\n\n  // Mutates the config, so the meteor.build command will have the correct build location\n  config.app.buildOptions.buildLocation = config.app.buildOptions.buildLocation ||\n    tmpBuildPath(config.app.path, api);\n\n  const bundlePath = api.resolvePath(config.app.buildOptions.buildLocation, 'bundle.zip');\n  const willBuild = shouldRebuild(bundlePath, api.getOptions()['cached-build']);\n\n  if (willBuild) {\n    await api.runCommand('meteor.build');\n    injectFiles(\n      api,\n      app,\n      nextVersion,\n      config.app\n    );\n    await archiveApp(config.app.buildOptions.buildLocation, api);\n  }\n\n  logStep('=> Uploading bundle');\n\n  const key = `${bundlePrefix}${nextVersion}`;\n  await upload(config.app, bucket, `${bundlePrefix}${nextVersion}`, bundlePath);\n\n  logStep('=> Creating Version');\n\n  await beanstalk.createApplicationVersion({\n    ApplicationName: app,\n    VersionLabel: nextVersion.toString(),\n    Description: createVersionDescription(api, config.app),\n    SourceBundle: {\n      S3Bucket: bucket,\n      S3Key: key\n    }\n  }).promise();\n\n  await api.runCommand('beanstalk.reconfig');\n\n  logStep('=> Deploying new version');\n\n  await beanstalk.updateEnvironment({\n    EnvironmentName: environment,\n    VersionLabel: nextVersion.toString()\n  }).promise();\n\n  await waitForEnvReady(config, true);\n\n  const {\n    Environments\n  } = await beanstalk.describeEnvironments({\n    ApplicationName: app,\n    EnvironmentNames: [environment]\n  }).promise();\n\n  console.log(chalk.green(`App is running at ${Environments[0].CNAME}`));\n\n  await api.runCommand('beanstalk.clean');\n\n  await api.runCommand('beanstalk.ssl');\n\n  if (config.app.longEnvVars) {\n    const {\n      ConfigurationSettings\n    } = await beanstalk.describeConfigurationSettings({\n      EnvironmentName: environment,\n      ApplicationName: app\n    }).promise();\n\n    const {\n      migrated\n    } = checkLongEnvSafe(ConfigurationSettings, api.commandHistory, config.app);\n\n    if (!migrated) {\n      // We know the bundle now supports longEnvVars, so it is safe to migrate\n      await api.runCommand('beanstalk.reconfig');\n    }\n  }\n}\n\nexport async function logs(api) {\n  const logsContent = await getLogs(api);\n\n  logsContent.forEach(({\n    data,\n    instance\n  }) => {\n    data = data.split('-------------------------------------\\n/var/log/');\n    process.stdout.write(`${instance} `);\n    process.stdout.write(data[1]);\n  });\n}\n\nexport async function logsNginx(api) {\n  const logsContent = await getLogs(api);\n\n  logsContent.forEach(({\n    instance,\n    data\n  }) => {\n    data = data.split('-------------------------------------\\n/var/log/');\n    console.log(`${instance} `, data[2]);\n    console.log(`${instance} `, data[4]);\n  });\n}\n\nexport async function logsEb(api) {\n  const logsContent = await getLogs(api);\n\n  logsContent.forEach(({\n    data,\n    instance\n  }) => {\n    data = data.split('\\n\\n\\n-------------------------------------\\n/var/log/');\n    process.stdout.write(`${instance} `);\n    process.stdout.write(data[2]);\n  });\n}\n\nexport async function start(api) {\n  const config = api.getConfig();\n  const {\n    environment\n  } = names(config);\n\n  logStep('=> Starting App');\n\n  const {\n    EnvironmentResources\n  } = await beanstalk.describeEnvironmentResources({\n    EnvironmentName: environment\n  }).promise();\n\n  const autoScalingGroup = EnvironmentResources.AutoScalingGroups[0].Name;\n\n  const {\n    minInstances,\n    maxInstances\n  } = config.app;\n\n  await autoScaling.updateAutoScalingGroup({\n    AutoScalingGroupName: autoScalingGroup,\n    MaxSize: maxInstances,\n    MinSize: minInstances,\n    DesiredCapacity: minInstances\n  }).promise();\n\n  await waitForHealth(config);\n}\n\nexport async function stop(api) {\n  const config = api.getConfig();\n  const {\n    environment\n  } = names(config);\n\n  logStep('=> Stopping App');\n\n  const {\n    EnvironmentResources\n  } = await beanstalk.describeEnvironmentResources({\n    EnvironmentName: environment\n  }).promise();\n\n  const autoScalingGroup = EnvironmentResources.AutoScalingGroups[0].Name;\n\n  await autoScaling.updateAutoScalingGroup({\n    AutoScalingGroupName: autoScalingGroup,\n    MaxSize: 0,\n    MinSize: 0,\n    DesiredCapacity: 0\n  }).promise();\n\n  await waitForHealth(config, 'Grey');\n}\n\nexport async function restart(api) {\n  const config = api.getConfig();\n  const {\n    environment\n  } = names(config);\n\n  logStep('=> Restarting App');\n\n  await beanstalk.restartAppServer({\n    EnvironmentName: environment\n  }).promise();\n\n  await waitForEnvReady(config, false);\n}\n\nexport async function clean(api) {\n  const config = api.getConfig();\n  const {\n    app,\n    bucket\n  } = names(config);\n\n  logStep('=> Finding old versions');\n  const {\n    versions\n  } = await oldVersions(api);\n  const envVersions = await oldEnvVersions(api);\n\n  logStep('=> Removing old versions');\n\n  const promises = [];\n  for (let i = 0; i < versions.length; i++) {\n    promises.push(beanstalk.deleteApplicationVersion({\n      ApplicationName: app,\n      VersionLabel: versions[i].toString(),\n      DeleteSourceBundle: true\n    }).promise());\n  }\n\n  for (let i = 0; i < envVersions.length; i++) {\n    promises.push(s3.deleteObject({\n      Bucket: bucket,\n      Key: `env/${envVersions[i]}.txt`\n    }).promise());\n  }\n\n  // TODO: remove bundles\n\n  await Promise.all(promises);\n}\n\nexport async function reconfig(api) {\n  const config = api.getConfig();\n  const {\n    app,\n    environment,\n    bucket\n  } = names(config);\n\n  logStep('=> Configuring Beanstalk Environment');\n\n  // check if env exists\n  const {\n    Environments\n  } = await beanstalk.describeEnvironments({\n    ApplicationName: app,\n    EnvironmentNames: [environment]\n  }).promise();\n\n  if (!Environments.find(env => env.Status !== 'Terminated')) {\n    const desiredEbConfig = createDesiredConfig(\n      api.getConfig(),\n      api.getSettings(),\n      config.app.longEnvVars ? 1 : false\n    );\n\n    if (config.app.longEnvVars) {\n      await uploadEnvFile(bucket, 1, config.app.env, api.getSettings());\n    }\n\n    const {\n      SolutionStacks\n    } = await beanstalk.listAvailableSolutionStacks().promise();\n    const solutionStack = SolutionStacks.find(name => name.endsWith('running Node.js'));\n\n    const [version] = await ebVersions(api);\n    await beanstalk.createEnvironment({\n      ApplicationName: app,\n      EnvironmentName: environment,\n      Description: `Environment for ${config.app.name}, managed by Meteor Up`,\n      VersionLabel: version.toString(),\n      SolutionStackName: '64bit Amazon Linux 2 v5.4.1 running Node.js 14',\n      OptionSettings: desiredEbConfig.OptionSettings\n    }).promise();\n\n    console.log(' Created Environment');\n    await waitForEnvReady(config, false);\n  } else {\n    const {\n      ConfigurationSettings\n    } = await beanstalk.describeConfigurationSettings({\n      EnvironmentName: environment,\n      ApplicationName: app\n    }).promise();\n    const {\n      enabled: longEnvEnabled,\n      safeToReconfig\n    } = checkLongEnvSafe(ConfigurationSettings, api.commandHistory, config.app);\n    let nextEnvVersion = 0;\n    if (safeToReconfig) {\n      const currentEnvVersion = await largestEnvVersion(api);\n      nextEnvVersion = currentEnvVersion + 1;\n    }\n    const desiredEbConfig = createDesiredConfig(\n      api.getConfig(),\n      api.getSettings(),\n      safeToReconfig ? nextEnvVersion : 0\n    );\n    const {\n      toRemove,\n      toUpdate\n    } = diffConfig(\n      ConfigurationSettings[0].OptionSettings,\n      desiredEbConfig.OptionSettings\n    );\n\n    if (longEnvEnabled) {\n      await uploadEnvFile(bucket, nextEnvVersion, config.app.env, api.getSettings());\n      if (!safeToReconfig) {\n        // Reconfig will be run again after deploy to migrate.\n        // This way we know the bundle includes the necessary files\n        return;\n      }\n    }\n\n    if (toRemove.length > 0 || toUpdate.length > 0) {\n      await beanstalk.updateEnvironment({\n        EnvironmentName: environment,\n        OptionSettings: toUpdate,\n        OptionsToRemove: toRemove\n      }).promise();\n      console.log('  Updated Environment');\n      await waitForEnvReady(config, true);\n    }\n  }\n\n  const {\n    ConfigurationSettings\n  } = await beanstalk.describeConfigurationSettings({\n    EnvironmentName: environment,\n    ApplicationName: app\n  }).promise();\n\n  if (scalingConfigChanged(ConfigurationSettings[0].OptionSettings, config)) {\n    logStep('=> Configuring scaling');\n    await beanstalk.updateEnvironment({\n      EnvironmentName: environment,\n      OptionSettings: scalingConfig(config.app).OptionSettings\n    }).promise();\n    await waitForEnvReady(config, true);\n  }\n}\n\nexport async function events(api) {\n  const {\n    environment\n  } = names(api.getConfig());\n\n  const {\n    Events: envEvents\n  } = await beanstalk.describeEvents({\n    EnvironmentName: environment\n  }).promise();\n\n  console.log(envEvents.map(ev => `${ev.EventDate}: ${ev.Message}`).join('\\n'));\n}\n\nexport async function status(api) {\n  const {\n    environment\n  } = names(api.getConfig());\n\n  const result = await beanstalk.describeEnvironmentHealth({\n    AttributeNames: [\n      'All'\n    ],\n    EnvironmentName: environment\n  }).promise();\n  const {\n    InstanceHealthList\n  } = await beanstalk.describeInstancesHealth({\n    AttributeNames: [\n      'All'\n    ],\n    EnvironmentName: environment\n  }).promise();\n\n  const {\n    RequestCount,\n    Duration,\n    StatusCodes,\n    Latency\n  } = result.ApplicationMetrics;\n\n  console.log(`Environment Status: ${result.Status}`);\n  console.log(`Health Status: ${coloredStatusText(result.Color, result.HealthStatus)}`);\n  if (result.Causes.length > 0) {\n    console.log('Causes: ');\n    result.Causes.forEach(cause => console.log(`  ${cause}`));\n  }\n  console.log('');\n  console.log(`=== Metrics For Last ${Duration || 'Unknown'} Minutes ===`);\n  console.log(`  Requests: ${RequestCount}`);\n  if (StatusCodes) {\n    console.log('  Status Codes');\n    console.log(`    2xx: ${StatusCodes.Status2xx}`);\n    console.log(`    3xx: ${StatusCodes.Status3xx}`);\n    console.log(`    4xx: ${StatusCodes.Status4xx}`);\n    console.log(`    5xx: ${StatusCodes.Status5xx}`);\n  }\n  if (Latency) {\n    console.log('  Latency');\n    console.log(`    99.9%: ${Latency.P999}`);\n    console.log(`    99%  : ${Latency.P99}`);\n    console.log(`    95%  : ${Latency.P95}`);\n    console.log(`    90%  : ${Latency.P90}`);\n    console.log(`    85%  : ${Latency.P85}`);\n    console.log(`    75%  : ${Latency.P75}`);\n    console.log(`    50%  : ${Latency.P50}`);\n    console.log(`    10%  : ${Latency.P10}`);\n  }\n  console.log('');\n  console.log('=== Instances ===');\n  InstanceHealthList.forEach((instance) => {\n    console.log(`  ${instance.InstanceId}: ${coloredStatusText(instance.Color, instance.HealthStatus)}`);\n  });\n  if (InstanceHealthList.length === 0) {\n    console.log('  0 Instances');\n  }\n}\n\nexport async function ssl(api) {\n  const config = api.getConfig();\n\n  if (!config.app || !config.app.sslDomains) {\n    logStep('=> Updating Beanstalk SSL Config');\n    await updateSSLConfig(config);\n    return;\n  }\n\n  logStep('=> Checking Certificate Status');\n\n  const domains = config.app.sslDomains;\n  const {\n    CertificateSummaryList\n  } = await acm.listCertificates().promise();\n  let found = null;\n\n  for (let i = 0; i < CertificateSummaryList.length; i++) {\n    const {\n      DomainName,\n      CertificateArn\n    } = CertificateSummaryList[i];\n\n    if (DomainName === domains[0]) {\n      const {\n        Certificate\n      } = await acm.describeCertificate({ // eslint-disable-line no-await-in-loop\n        CertificateArn\n      }).promise();\n\n      if (domains.join(',') === Certificate.SubjectAlternativeNames.join(',')) {\n        found = CertificateSummaryList[i];\n      }\n    }\n  }\n\n  let certificateArn;\n\n  if (!found) {\n    logStep('=> Requesting Certificate');\n\n    const result = await acm.requestCertificate({\n      DomainName: domains.shift(),\n      SubjectAlternativeNames: domains.length > 0 ? domains : null\n    }).promise();\n\n    certificateArn = result.CertificateArn;\n  }\n\n  if (found) {\n    certificateArn = found.CertificateArn;\n  }\n\n  let emailsProvided = false;\n  let checks = 0;\n  let certificate;\n\n  /* eslint-disable no-await-in-loop */\n  while (!emailsProvided && checks < 5) {\n    const {\n      Certificate\n    } = await acm.describeCertificate({\n      CertificateArn: certificateArn\n    }).promise();\n    const validationOptions = Certificate.DomainValidationOptions[0];\n\n    if (typeof validationOptions.ValidationEmails === 'undefined') {\n      emailsProvided = true;\n      certificate = Certificate;\n    } else if (validationOptions.ValidationEmails.length > 0 || checks === 6) {\n      emailsProvided = true;\n      certificate = Certificate;\n    } else {\n      checks += 1;\n\n      await new Promise((resolve) => {\n        setTimeout(resolve, 1000 * 10);\n      });\n    }\n  }\n\n  if (certificate.Status === 'PENDING_VALIDATION') {\n    console.log('Certificate is pending validation.');\n    certificate.DomainValidationOptions.forEach(({\n      DomainName,\n      ValidationEmails,\n      ValidationDomain,\n      ValidationStatus\n    }) => {\n      if (ValidationStatus === 'SUCCESS') {\n        console.log(chalk.green(`${ValidationDomain || DomainName} has been verified`));\n        return;\n      }\n\n      console.log(chalk.yellow(`${ValidationDomain || DomainName} is pending validation`));\n\n      if (ValidationEmails) {\n        console.log('Emails with instructions have been sent to:');\n\n        ValidationEmails.forEach((email) => {\n          console.log(`  ${email}`);\n        });\n      }\n\n      console.log('Run \"mup beanstalk ssl\" after you have verified the domains, or to check the verification status');\n    });\n  } else if (certificate.Status === 'ISSUED') {\n    console.log(chalk.green('Certificate has been issued'));\n    logStep('=> Updating Beanstalk SSL Config');\n    await updateSSLConfig(config, certificateArn);\n  }\n}\n"],"file":"command-handlers.js"}