{"version":3,"sources":["../src/upload.js"],"names":["fs","shellEscape","s3","upload","appConfig","bucket","key","bundlePath","params","Bucket","fileStream","createReadStream","on","err","console","log","Body","Key","Promise","resolve","reject","lastPercentage","uploader","progress","percentage","Math","floor","loaded","total","send","result","uploadEnvFile","version","env","settings","content","settingsString","encodeURIComponent","JSON","stringify","Object","keys","forEach","value"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport shellEscape from 'shell-escape';\nimport { s3 } from './aws';\n\nexport default function upload(appConfig, bucket, key, bundlePath) {\n  const params = { Bucket: bucket };\n  const fileStream = fs.createReadStream(bundlePath);\n  fileStream.on('error', (err) => {\n    console.log(err);\n  });\n\n  params.Body = fileStream;\n  params.Key = key;\n\n  return new Promise((resolve, reject) => {\n    let lastPercentage = -1;\n\n    const uploader = s3.upload(params);\n\n    uploader.on('httpUploadProgress', (progress) => {\n      const percentage = Math.floor(progress.loaded / progress.total * 100);\n\n      if (percentage !== lastPercentage) {\n        console.log(`  Uploaded ${percentage}%`);\n\n        if (percentage === 100) {\n          console.log('  Finishing upload. This could take a couple minutes');\n        }\n      }\n\n      lastPercentage = percentage;\n    });\n\n    uploader.send((err, result) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n\n      resolve(result);\n    });\n  });\n}\n\nexport function uploadEnvFile(bucket, version, env, settings) {\n  let content = '';\n  const settingsString = encodeURIComponent(JSON.stringify(settings));\n\n  Object.keys(env).forEach((key) => {\n    const value = shellEscape([env[key]]);\n    content += `export ${key}=${value}\\n`;\n  });\n\n  content += `export METEOR_SETTINGS_ENCODED=${shellEscape([settingsString])}`;\n\n  return new Promise((resolve, reject) => {\n    const uploader = s3.upload({\n      Bucket: bucket,\n      Body: content,\n      Key: `env/${version}.txt`\n    });\n    uploader.send((err, result) => {\n      if (err) {\n        return reject(err);\n      }\n\n      resolve(result);\n    });\n  });\n}\n"],"file":"upload.js"}