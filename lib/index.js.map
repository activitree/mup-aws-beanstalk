{"version":3,"sources":["../src/index.js"],"names":["_commands","validator","name","description","commands","validate","app","config","utils","type","prepareConfig","defaultBuildOptions","serverOnly","buildOptions","minInstances","maxInstances","instanceType","env","PORT","METEOR_SIGTERM_GRACE_PERIOD_SECONDS","oldVersions","isBeanstalkApp","api","getConfig","hooks","runCommand"],"mappings":"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","sourcesContent":["import * as _commands from './commands';\nimport validator from './validate';\n\nexport const name = 'beanstalk';\nexport const description = 'Deploy Meteor app to AWS Elastic Beanstalk';\nexport const commands = _commands;\n\nexport const validate = {\n  app(config, utils) {\n    if (config.app && config.app.type === 'aws-beanstalk') {\n      return validator(config, utils);\n    }\n\n    return [];\n  }\n};\n\nexport function prepareConfig(config) {\n  if (!config.app || config.app.type !== 'aws-beanstalk') {\n    return config;\n  }\n\n  const defaultBuildOptions = {\n    serverOnly: true\n  };\n\n  config.app.buildOptions = config.app.buildOptions || defaultBuildOptions;\n\n  // This will change 0 to 1. The validator will warn when the number is 0\n  // To have 0 instances, `mup stop` should be used\n  config.app.minInstances = config.app.minInstances || 1;\n  config.app.maxInstances = config.app.maxInstances || config.app.minInstances;\n\n  config.app.instanceType = config.app.instanceType || 't2.micro';\n\n  config.app.env = config.app.env || {};\n  config.app.env.PORT = 8081;\n  config.app.env.METEOR_SIGTERM_GRACE_PERIOD_SECONDS = 30;\n\n  config.app.oldVersions = config.app.oldVersions || 3;\n\n  return config;\n}\n\nfunction isBeanstalkApp(api) {\n  const config = api.getConfig();\n\n  if (config.app && config.app.type === 'aws-beanstalk') {\n    return true;\n  }\n\n  return false;\n}\n\nexport const hooks = {\n  'post.setup': (api) => {\n    if (isBeanstalkApp(api)) {\n      return api.runCommand('beanstalk.setup');\n    }\n  },\n  'post.deploy': (api) => {\n    if (isBeanstalkApp(api)) {\n      return api.runCommand('beanstalk.deploy');\n    }\n  },\n  'post.logs': (api) => {\n    if (isBeanstalkApp(api)) {\n      return api.runCommand('beanstalk.logs');\n    }\n  },\n  'post.start': (api) => {\n    if (isBeanstalkApp(api)) {\n      return api.runCommand('beanstalk.start');\n    }\n  },\n  'post.stop': (api) => {\n    if (isBeanstalkApp(api)) {\n      return api.runCommand('beanstalk.stop');\n    }\n  },\n  'post.restart': (api) => {\n    if (isBeanstalkApp(api)) {\n      return api.runCommand('beanstalk.restart');\n    }\n  },\n  'post.reconfig': (api) => {\n    if (isBeanstalkApp(api)) {\n      return api.runCommand('beanstalk.reconfig');\n    }\n  },\n  'post.status': (api) => {\n    if (isBeanstalkApp(api)) {\n      return api.runCommand('beanstalk.status');\n    }\n  }\n};\n"],"file":"index.js"}