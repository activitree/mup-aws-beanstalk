{"version":3,"sources":["../src/utils.js"],"names":["logStep","message","console","log","chalk","blue","shouldRebuild","bundlePath","useCachedBuild","fs","existsSync","tmpBuildPath","appPath","api","rand","random","create","uuidNumbers","i","push","resolvePath","os","tmpdir","uuid","v4","names","config","name","app","toLowerCase","bucket","environment","bundlePrefix","instanceProfile","serviceRole","trailBucketPrefix","trailName","deregisterRuleName","eventTargetRole","eventTargetPolicyName","eventTargetPassRoleName","automationDocument","createUniqueName","prefix","randomNumbers","Math","floor","Date","now","retrieveEnvironmentInfo","count","getConfig","beanstalk","EnvironmentName","InfoType","promise","EnvironmentInfo","length","Error","Promise","resolve","reject","setTimeout","then","catch","getLogs","requestEnvironmentInfo","logsForServer","reduce","result","info","Ec2InstanceId","Message","all","Object","keys","map","key","axios","get","data","instance","getNodeVersion","star","readFileSync","toString","nodeVersionTxt","JSON","parse","npmVersion","nodeVersion","substr","startsWith","attachPolicies","roleName","policies","promises","forEach","policy","iam","attachRolePolicy","RoleName","PolicyArn","getAccountId","sts","getCallerIdentity","Account","ensureRoleExists","assumeRolePolicyDocument","ensureAssumeRolePolicy","exists","updateAssumeRolePolicy","getRole","Role","currentAssumeRolePolicy","decodeURIComponent","AssumeRolePolicyDocument","stringify","createRole","PolicyDocument","ensureInstanceProfileExists","getInstanceProfile","InstanceProfileName","createInstanceProfile","ensureRoleAdded","role","added","InstanceProfile","Roles","addRoleToInstanceProfile","ensurePoliciesAttached","listAttachedRolePolicies","AttachedPolicies","unattachedPolicies","indexOf","ensureInlinePolicyAttached","policyName","policyDocument","needsUpdating","getRolePolicy","PolicyName","currentPolicyDocument","putRolePolicy","ensureBucketExists","buckets","bucketName","region","find","Name","s3","createBucket","Bucket","CreateBucketConfiguration","LocationConstraint","findBucketWithPrefix","ensureBucketPolicyAttached","error","getBucketPolicy","Policy","currentPolicy","params","putBucketPolicy","ensureCloudWatchRule","description","eventPattern","cloudWatchEvents","describeRule","putRule","Description","EventPattern","ensureRuleTargetExists","ruleName","target","listTargetsByRule","Rule","Targets","_target","putTargets","coloredStatusText","envColor","text","green","yellow","red","checkLongEnvSafe","currentConfig","commandHistory","appConfig","optionEnabled","longEnvVars","previouslyMigrated","OptionSettings","Namespace","OptionName","reconfigCount","filter","ranDeploy","migrated","safeToReconfig","enabled","createVersionDescription","getBasePath","path","cwd","stdio","e","toUTCString","split","slice","ensureSsmDocument","content","ssm","getDocument","DocumentVersion","currentContent","Content","replace","createDocument","DocumentType","updateDocument"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport chalk from 'chalk';\nimport fs from 'fs';\nimport { isEqual } from 'lodash';\nimport os from 'os';\nimport random from 'random-seed';\nimport uuid from 'uuid';\nimport { execSync } from 'child_process';\nimport { beanstalk, cloudWatchEvents, iam, s3, sts, ssm } from './aws';\nimport { getRecheckInterval } from './recheck';\n\nexport function logStep(message) {\n  console.log(chalk.blue(message));\n}\n\nexport function shouldRebuild(bundlePath, useCachedBuild) {\n  if (fs.existsSync(bundlePath) && useCachedBuild) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function tmpBuildPath(appPath, api) {\n  const rand = random.create(appPath);\n  const uuidNumbers = [];\n\n  for (let i = 0; i < 16; i++) {\n    uuidNumbers.push(rand(255));\n  }\n\n  return api.resolvePath(\n    os.tmpdir(),\n    `mup-meteor-${uuid.v4({ random: uuidNumbers })}`\n  );\n}\n\nexport function names(config) {\n  const name = config.app.name.toLowerCase();\n\n  return {\n    bucket: `mup-${name}`,\n    environment: `mup-env-${name}`,\n    app: `mup-${name}`,\n    bundlePrefix: `mup/bundles/${name}/`,\n    instanceProfile: 'aws-elasticbeanstalk-ec2-role',\n    serviceRole: 'aws-elasticbeanstalk-service-role',\n    trailBucketPrefix: 'mup-graceful-shutdown-trail',\n    trailName: 'mup-graceful-shutdown-trail',\n    deregisterRuleName: 'mup-target-deregister',\n    eventTargetRole: `mup-envoke-run-command-${name}`,\n    eventTargetPolicyName: 'Invoke_Run_Command',\n    eventTargetPassRoleName: 'Pass_Role',\n    automationDocument: 'mup-graceful-shutdown'\n  };\n}\n\nexport function createUniqueName(prefix = '') {\n  const randomNumbers = Math.floor(Math.random() * 10000);\n\n  return `${prefix}-${Date.now()}-${randomNumbers}`;\n}\n\nasync function retrieveEnvironmentInfo(api, count) {\n  const config = api.getConfig();\n  const {\n    environment\n  } = names(config);\n\n  const {\n    EnvironmentInfo\n  } = await beanstalk.retrieveEnvironmentInfo({\n    EnvironmentName: environment,\n    InfoType: 'tail'\n  }).promise();\n\n  if (EnvironmentInfo.length > 0) {\n    return EnvironmentInfo;\n  } else if (count > 5) {\n    throw new Error('No logs');\n  }\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      // The logs aren't always available, so retry until they are\n      // Another option is to look for the event that says it is ready\n      retrieveEnvironmentInfo(api, count + 1)\n        .then(resolve)\n        .catch(reject);\n    }, getRecheckInterval());\n  });\n}\n\nexport async function getLogs(api) {\n  const config = api.getConfig();\n  const {\n    environment\n  } = names(config);\n\n  logStep('=> Requesting Logs');\n\n  await beanstalk.requestEnvironmentInfo({\n    EnvironmentName: environment,\n    InfoType: 'tail'\n  }).promise();\n\n  const EnvironmentInfo = await retrieveEnvironmentInfo(api, 0);\n\n  logStep('=> Downloading Logs');\n\n  const logsForServer = EnvironmentInfo.reduce((result, info) => {\n    result[info.Ec2InstanceId] = info.Message;\n\n    return result;\n  }, {});\n\n  return Promise.all(Object.keys(logsForServer).map(key =>\n    new Promise((resolve, reject) => {\n      axios.get(logsForServer[key]).then(({ data }) => {\n        resolve({\n          data,\n          instance: key\n        });\n      }).catch(reject);\n    })));\n}\n\nexport function getNodeVersion(api, bundlePath) {\n  let star = fs.readFileSync(api.resolvePath(bundlePath, 'bundle/star.json')).toString();\n  const nodeVersionTxt = fs.readFileSync(api.resolvePath(bundlePath, 'bundle/.node_version.txt')).toString();\n\n  star = JSON.parse(star);\n\n  if (star.npmVersion) {\n    return {\n      nodeVersion: star.nodeVersion,\n      npmVersion: star.npmVersion\n    };\n  }\n\n  const nodeVersion = nodeVersionTxt.substr(1);\n\n  if (nodeVersion.startsWith('4')) {\n    return {\n      nodeVersion,\n      npmVersion: '4.6.1'\n    };\n  }\n\n  return {\n    nodeVersion,\n    npmVersion: '3.10.5'\n  };\n}\n\nexport async function attachPolicies(config, roleName, policies) {\n  const promises = [];\n\n  policies.forEach((policy) => {\n    const promise = iam.attachRolePolicy({\n      RoleName: roleName,\n      PolicyArn: policy\n    }).promise();\n\n    promises.push(promise);\n  });\n\n  await Promise.all(promises);\n}\n\nexport function getAccountId() {\n  return sts.getCallerIdentity()\n    .promise()\n    .then(({ Account }) => Account);\n}\n\nexport async function ensureRoleExists(name, assumeRolePolicyDocument, ensureAssumeRolePolicy) {\n  let exists = true;\n  let updateAssumeRolePolicy = false;\n\n  try {\n    const { Role } = await iam.getRole({\n      RoleName: name\n    }).promise();\n\n\n    const currentAssumeRolePolicy = decodeURIComponent(Role.AssumeRolePolicyDocument);\n    // Make the whitespace consistent with the current document\n    assumeRolePolicyDocument = JSON.stringify(JSON.parse(assumeRolePolicyDocument));\n\n    if (currentAssumeRolePolicy !== assumeRolePolicyDocument && ensureAssumeRolePolicy) {\n      updateAssumeRolePolicy = true;\n    }\n  } catch (e) {\n    exists = false;\n  }\n\n  if (!exists) {\n    await iam.createRole({\n      RoleName: name,\n      AssumeRolePolicyDocument: assumeRolePolicyDocument\n    }).promise();\n  } else if (updateAssumeRolePolicy) {\n    await iam.updateAssumeRolePolicy({\n      RoleName: name,\n      PolicyDocument: assumeRolePolicyDocument\n    }).promise();\n  }\n}\n\nexport async function ensureInstanceProfileExists(config, name) {\n  let exists = true;\n\n  try {\n    await iam.getInstanceProfile({\n      InstanceProfileName: name\n    }).promise();\n  } catch (e) {\n    exists = false;\n  }\n\n  if (!exists) {\n    await iam.createInstanceProfile({\n      InstanceProfileName: name\n    }).promise();\n  }\n}\n\nexport async function ensureRoleAdded(config, instanceProfile, role) {\n  let added = true;\n\n\n  const {\n    InstanceProfile\n  } = await iam.getInstanceProfile({\n    InstanceProfileName: instanceProfile\n  }).promise();\n\n  if (InstanceProfile.Roles.length === 0 || InstanceProfile.Roles[0].RoleName !== role) {\n    added = false;\n  }\n\n  if (!added) {\n    await iam.addRoleToInstanceProfile({\n      InstanceProfileName: instanceProfile,\n      RoleName: role\n    }).promise();\n  }\n}\n\nexport async function ensurePoliciesAttached(config, role, policies) {\n  let {\n    AttachedPolicies\n  } = await iam.listAttachedRolePolicies({\n    RoleName: role\n  }).promise();\n\n  AttachedPolicies = AttachedPolicies.map(policy => policy.PolicyArn);\n\n  const unattachedPolicies = policies.reduce((result, policy) => {\n    if (AttachedPolicies.indexOf(policy) === -1) {\n      result.push(policy);\n    }\n\n    return result;\n  }, []);\n\n  if (unattachedPolicies.length > 0) {\n    await attachPolicies(config, role, unattachedPolicies);\n  }\n}\n\nexport async function ensureInlinePolicyAttached(role, policyName, policyDocument) {\n  let exists = true;\n  let needsUpdating = false;\n\n  try {\n    const result = await iam.getRolePolicy({\n      RoleName: role,\n      PolicyName: policyName\n    }).promise();\n    const currentPolicyDocument = decodeURIComponent(result.PolicyDocument);\n\n    if (currentPolicyDocument !== policyDocument) {\n      needsUpdating = true;\n    }\n  } catch (e) {\n    exists = false;\n  }\n\n  if (!exists || needsUpdating) {\n    await iam.putRolePolicy({\n      RoleName: role,\n      PolicyName: policyName,\n      PolicyDocument: policyDocument\n    }).promise();\n  }\n}\n\nexport async function ensureBucketExists(buckets, bucketName, region) {\n  if (!buckets.find(bucket => bucket.Name === bucketName)) {\n    await s3.createBucket({\n      Bucket: bucketName,\n      ...(region ? {\n        CreateBucketConfiguration: {\n          LocationConstraint: region\n        }\n      } : {})\n    }).promise();\n\n    return true;\n  }\n}\n\nexport function findBucketWithPrefix(buckets, prefix) {\n  return buckets.find(bucket => bucket.Name.indexOf(prefix) === 0);\n}\n\nexport async function ensureBucketPolicyAttached(bucketName, policy) {\n  let error = false;\n  let currentPolicy;\n\n  try {\n    const { Policy } = await s3.getBucketPolicy({ Bucket: bucketName }).promise();\n    currentPolicy = Policy;\n  } catch (e) {\n    error = true;\n  }\n\n  if (error || currentPolicy !== policy) {\n    const params = {\n      Bucket: bucketName,\n      Policy: policy\n    };\n\n    await s3.putBucketPolicy(params).promise();\n  }\n}\n\nexport async function ensureCloudWatchRule(name, description, eventPattern) {\n  let error = false;\n\n  try {\n    await cloudWatchEvents.describeRule({ Name: name }).promise();\n  } catch (e) {\n    error = true;\n  }\n\n  if (error) {\n    await cloudWatchEvents.putRule({\n      Name: name,\n      Description: description,\n      EventPattern: eventPattern\n    }).promise();\n\n    return true;\n  }\n\n  return false;\n}\n\nexport async function ensureRuleTargetExists(ruleName, target) {\n  const {\n    Targets\n  } = await cloudWatchEvents.listTargetsByRule({\n    Rule: ruleName\n  }).promise();\n\n  if (!Targets.find(_target => isEqual(_target, target))) {\n    const params = {\n      Rule: ruleName,\n      Targets: [target]\n    };\n    await cloudWatchEvents.putTargets(params).promise();\n\n    return true;\n  }\n}\n\nexport function coloredStatusText(envColor, text) {\n  if (envColor === 'Green') {\n    return chalk.green(text);\n  } else if (envColor === 'Yellow') {\n    return chalk.yellow(text);\n  } else if (envColor === 'Red') {\n    return chalk.red(text);\n  }\n  return text;\n}\n\n\n// Checks if it is safe to use the environment variables from s3\nexport function checkLongEnvSafe(currentConfig, commandHistory, appConfig) {\n  const optionEnabled = appConfig.longEnvVars;\n  const previouslyMigrated = currentConfig[0].OptionSettings.find(({ Namespace, OptionName }) => Namespace === 'aws:elasticbeanstalk:application:environment' &&\n      OptionName === 'MUP_ENV_FILE_VERSION');\n  const reconfigCount = commandHistory.filter(({ name }) => name === 'beanstalk.reconfig').length;\n  const ranDeploy = commandHistory.find(({ name }) => name === 'beanstalk.deploy') && reconfigCount > 1;\n\n  return {\n    migrated: previouslyMigrated,\n    safeToReconfig: optionEnabled && (previouslyMigrated || ranDeploy),\n    enabled: optionEnabled\n  };\n}\n\nexport function createVersionDescription(api, appConfig) {\n  const appPath = api.resolvePath(api.getBasePath(), appConfig.path);\n  let description = '';\n\n  try {\n    description = execSync('git log -1 --pretty=%B', {\n      cwd: appPath,\n      stdio: 'pipe'\n    }).toString();\n  } catch (e) {\n    description = `Deployed by Mup on ${new Date().toUTCString()}`;\n  }\n  return description.split('\\n')[0].slice(0, 195);\n}\n\nexport async function ensureSsmDocument(name, content) {\n  let exists = true;\n  let needsUpdating = false;\n\n  try {\n    const result = await ssm.getDocument({ Name: name, DocumentVersion: '$LATEST' }).promise();\n    // If the document was created or edited on the AWS console, there is extra new\n    // line characters and whitespace\n    const currentContent = JSON.stringify(JSON.parse(result.Content.replace(/\\r?\\n|\\r/g, '')));\n    if (currentContent !== content) {\n      needsUpdating = true;\n    }\n  } catch (e) {\n    exists = false;\n  }\n\n  if (!exists) {\n    await ssm.createDocument({\n      Content: content,\n      Name: name,\n      DocumentType: 'Automation'\n    }).promise();\n\n    return true;\n  } else if (needsUpdating) {\n    await ssm.updateDocument({\n      Content: content,\n      Name: name,\n      DocumentVersion: '$LATEST'\n    }).promise();\n  }\n}\n"],"file":"utils.js"}