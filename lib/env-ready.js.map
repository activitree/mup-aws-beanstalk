{"version":3,"sources":["../src/env-ready.js"],"names":["getLastEvent","config","environment","beanstalk","describeEvents","EnvironmentName","MaxRecords","promise","Events","EventDate","showEvents","lastEventDate","app","ApplicationName","StartTime","forEach","event","toString","console","log","Message","Date","checker","prop","wantedValue","showProgress","lastStatus","Promise","resolve","reject","check","describeEnvironments","EnvironmentNames","result","setTimeout","value","Environments","text","toLocaleLowerCase","waitForEnvReady","waitForHealth","health"],"mappings":"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","sourcesContent":["import {\n  logStep,\n  names\n} from './utils';\nimport { beanstalk } from './aws';\nimport {\n  getRecheckInterval,\n  checkForThrottlingException,\n  handleThrottlingException\n} from './recheck';\n\nexport async function getLastEvent(config) {\n  const {\n    environment\n  } = names(config);\n\n  const {\n    Events\n  } = await beanstalk.describeEvents({\n    EnvironmentName: environment,\n    MaxRecords: 5\n  }).promise();\n\n  return Events[0].EventDate;\n}\n\nexport async function showEvents(config, lastEventDate) {\n  const {\n    environment,\n    app\n  } = names(config);\n\n  const {\n    Events\n  } = await beanstalk.describeEvents({\n    EnvironmentName: environment,\n    ApplicationName: app,\n    StartTime: lastEventDate\n  }).promise();\n\n  Events.forEach((event) => {\n    if (event.EventDate.toString() === lastEventDate.toString()) {\n      return;\n    }\n    console.log(`  Env Event: ${event.Message}`);\n  });\n\n  return new Date(Events[0].EventDate);\n}\n\nasync function checker(config, prop, wantedValue, showProgress) {\n  const {\n    environment,\n    app\n  } = names(config);\n\n  let lastEventDate = null;\n  let lastStatus = null;\n\n  if (showProgress) {\n    lastEventDate = await getLastEvent(config);\n  }\n\n  return new Promise((resolve, reject) => {\n    async function check() {\n      let result;\n      try {\n        result = await beanstalk.describeEnvironments({\n          EnvironmentNames: [environment],\n          ApplicationName: app\n        }).promise();\n      } catch (e) {\n        console.log('in check exception');\n        if (checkForThrottlingException(e)) {\n          handleThrottlingException();\n          return setTimeout(check, getRecheckInterval());\n        }\n\n        console.log(e);\n        reject(e);\n      }\n      const value = result.Environments[0][prop];\n      if (value !== wantedValue && value !== lastStatus) {\n        const text = prop === 'Health' ? `be ${wantedValue}` : `finish ${value}`;\n\n        logStep(`=> Waiting for Beanstalk Environment to ${text.toLocaleLowerCase()}`);\n        lastStatus = value;\n      } else if (value === wantedValue) {\n        // TODO: run showEvents one last time\n        resolve();\n\n        return;\n      }\n\n      if (showProgress) {\n        try {\n          lastEventDate = await showEvents(config, lastEventDate);\n        } catch (e) {\n          if (checkForThrottlingException(e)) {\n            handleThrottlingException();\n          } else {\n            console.log(e);\n          }\n        }\n      }\n\n      setTimeout(check, getRecheckInterval());\n    }\n\n    check();\n  });\n}\n\nexport async function waitForEnvReady(config, showProgress) {\n  await checker(config, 'Status', 'Ready', showProgress);\n}\n\nexport async function waitForHealth(config, health = 'Green', showProgress) {\n  await checker(config, 'Health', health, showProgress);\n}\n"],"file":"env-ready.js"}