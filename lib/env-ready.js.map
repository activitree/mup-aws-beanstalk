{"version":3,"sources":["../src/env-ready.js"],"names":["logStep","names","beanstalk","getRecheckInterval","checkForThrottlingException","handleThrottlingException","getLastEvent","config","environment","Events","describeEvents","EnvironmentName","MaxRecords","promise","EventDate","showEvents","lastEventDate","app","ApplicationName","StartTime","forEach","event","toString","console","log","Message","Date","checker","prop","wantedValue","showProgress","lastStatus","Promise","resolve","reject","check","result","describeEnvironments","EnvironmentNames","e","setTimeout","value","Environments","text","toLocaleLowerCase","waitForEnvReady","waitForHealth","health"],"mappings":"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","sourcesContent":["import {\n  logStep,\n  names\n} from './utils';\nimport { beanstalk } from './aws';\nimport {\n  getRecheckInterval,\n  checkForThrottlingException,\n  handleThrottlingException\n} from './recheck';\n\nexport async function getLastEvent(config) {\n  const {\n    environment\n  } = names(config);\n\n  const {\n    Events\n  } = await beanstalk.describeEvents({\n    EnvironmentName: environment,\n    MaxRecords: 5\n  }).promise();\n\n  return Events[0].EventDate;\n}\n\nexport async function showEvents(config, lastEventDate) {\n  const {\n    environment,\n    app\n  } = names(config);\n\n  const {\n    Events\n  } = await beanstalk.describeEvents({\n    EnvironmentName: environment,\n    ApplicationName: app,\n    StartTime: lastEventDate\n  }).promise();\n\n  Events.forEach((event) => {\n    if (event.EventDate.toString() === lastEventDate.toString()) {\n      return;\n    }\n    console.log(`  Env Event: ${event.Message}`);\n  });\n\n  return new Date(Events[0].EventDate);\n}\n\nasync function checker(config, prop, wantedValue, showProgress) {\n  const {\n    environment,\n    app\n  } = names(config);\n\n  let lastEventDate = null;\n  let lastStatus = null;\n\n  if (showProgress) {\n    lastEventDate = await getLastEvent(config);\n  }\n\n  return new Promise((resolve, reject) => {\n    async function check() {\n      let result;\n      try {\n        result = await beanstalk.describeEnvironments({\n          EnvironmentNames: [environment],\n          ApplicationName: app\n        }).promise();\n      } catch (e) {\n        console.log('in check exception');\n        if (checkForThrottlingException(e)) {\n          handleThrottlingException();\n          return setTimeout(check, getRecheckInterval());\n        }\n\n        console.log(e);\n        reject(e);\n      }\n      const value = result.Environments[0][prop];\n      if (value !== wantedValue && value !== lastStatus) {\n        const text = prop === 'Health' ? `be ${wantedValue}` : `finish ${value}`;\n\n        logStep(`=> Waiting for Beanstalk Environment to ${text.toLocaleLowerCase()}`);\n        lastStatus = value;\n      } else if (value === wantedValue) {\n        // TODO: run showEvents one last time\n        resolve();\n\n        return;\n      }\n\n      if (showProgress) {\n        try {\n          lastEventDate = await showEvents(config, lastEventDate);\n        } catch (e) {\n          if (checkForThrottlingException(e)) {\n            handleThrottlingException();\n          } else {\n            console.log(e);\n          }\n        }\n      }\n\n      setTimeout(check, getRecheckInterval());\n    }\n\n    check();\n  });\n}\n\nexport async function waitForEnvReady(config, showProgress) {\n  await checker(config, 'Status', 'Ready', showProgress);\n}\n\nexport async function waitForHealth(config, health = 'Green', showProgress) {\n  await checker(config, 'Health', health, showProgress);\n}\n"],"file":"env-ready.js"}