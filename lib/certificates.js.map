{"version":3,"sources":["../src/certificates.js"],"names":["ensureSSLConfigured","config","certificateArn","app","environment","ebConfig","Namespace","OptionName","Value","domains","sslDomains","length","beanstalk","updateEnvironment","EnvironmentName","OptionsToRemove","map","promise","needToUpdate","describeConfigurationSettings","ApplicationName","ConfigurationSettings","current","OptionSettings","reduce","convertToObject","desired","Object","keys","forEach","key"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;SAE8BA,mB;;;;;iGAAf,iBAAmCC,MAAnC,EAA2CC,cAA3C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,qBAIT,kBAAMD,MAAN,CAJS,EAEXE,GAFW,UAEXA,GAFW,EAGXC,WAHW,UAGXA,WAHW;AAMPC,YAAAA,QANO,GAMI,CAAC;AAChBC,cAAAA,SAAS,EAAE,wBADK;AAEhBC,cAAAA,UAAU,EAAE,oBAFI;AAGhBC,cAAAA,KAAK,EAAEN;AAHS,aAAD,EAId;AACDI,cAAAA,SAAS,EAAE,wBADV;AAEDC,cAAAA,UAAU,EAAE,gBAFX;AAGDC,cAAAA,KAAK,EAAE;AAHN,aAJc,EAQd;AACDF,cAAAA,SAAS,EAAE,wBADV;AAEDC,cAAAA,UAAU,EAAE,iBAFX;AAGDC,cAAAA,KAAK,EAAE;AAHN,aARc,EAYd;AACDF,cAAAA,SAAS,EAAE,wBADV;AAEDC,cAAAA,UAAU,EAAE,UAFX;AAGDC,cAAAA,KAAK,EAAE;AAHN,aAZc,CANJ;AAwBPC,YAAAA,OAxBO,GAwBGR,MAAM,CAACE,GAAP,CAAWO,UAxBd;;AAAA,kBA0BT,CAACD,OAAD,IAAYA,OAAO,CAACE,MAAR,KAAmB,CA1BtB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA2BLC,eAAUC,iBAAV,CAA4B;AAChCC,cAAAA,eAAe,EAAEV,WADe;AAEhC;AACAW,cAAAA,eAAe,EAAEV,QAAQ,CAACW,GAAT,CAAa,gBAA+B;AAAA,oBAA5BV,SAA4B,QAA5BA,SAA4B;AAAA,oBAAjBC,UAAiB,QAAjBA,UAAiB;AAC3D,uBAAO;AACLD,kBAAAA,SAAS,EAATA,SADK;AAELC,kBAAAA,UAAU,EAAVA;AAFK,iBAAP;AAID,eALgB;AAHe,aAA5B,EASHU,OATG,EA3BK;;AAAA;AAAA;AAAA;;AAAA;AAsCPC,YAAAA,YAtCO,GAsCQ,KAtCR;AAAA;AAAA,mBA0CDN,eAAUO,6BAAV,CAAwC;AAChDL,cAAAA,eAAe,EAAEV,WAD+B;AAEhDgB,cAAAA,eAAe,EAAEjB;AAF+B,aAAxC,EAGPc,OAHO,EA1CC;;AAAA;AAAA;AAyCTI,YAAAA,qBAzCS,yBAyCTA,qBAzCS;AA+CLC,YAAAA,OA/CK,GA+CKD,qBAAqB,CAAC,CAAD,CAArB,CAAyBE,cAAzB,CAAwCC,MAAxC,CAA+CC,yBAA/C,EAAgE,EAAhE,CA/CL;AAgDLC,YAAAA,OAhDK,GAgDKrB,QAAQ,CAACmB,MAAT,CAAgBC,yBAAhB,EAAiC,EAAjC,CAhDL;AAkDXE,YAAAA,MAAM,CAACC,IAAP,CAAYF,OAAZ,EAAqBG,OAArB,CAA6B,UAACC,GAAD,EAAS;AACpC,kBAAIZ,YAAY,IAAI,CAACI,OAAO,CAACQ,GAAD,CAAxB,IAAiCR,OAAO,CAACQ,GAAD,CAAP,CAAatB,KAAb,KAAuBkB,OAAO,CAACI,GAAD,CAAP,CAAatB,KAAzE,EAAgF;AAC9EU,gBAAAA,YAAY,GAAG,IAAf;AACD;AACF,aAJD;;AAlDW,iBAwDPA,YAxDO;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAyDHN,eAAUC,iBAAV,CAA4B;AAChCC,cAAAA,eAAe,EAAEV,WADe;AAEhCmB,cAAAA,cAAc,EAAElB;AAFgB,aAA5B,EAGHY,OAHG,EAzDG;;AAAA;AAAA;AAAA,mBA6DH,+BAAgBhB,MAAhB,EAAwB,IAAxB,CA7DG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { beanstalk } from './aws';\nimport { names } from './utils';\nimport { convertToObject } from './eb-config';\nimport { waitForEnvReady } from './env-ready';\n\nexport default async function ensureSSLConfigured(config, certificateArn) {\n  const {\n    app,\n    environment\n  } = names(config);\n\n  const ebConfig = [{\n    Namespace: 'aws:elbv2:listener:443',\n    OptionName: 'SSLCertificateArns',\n    Value: certificateArn\n  }, {\n    Namespace: 'aws:elbv2:listener:443',\n    OptionName: 'DefaultProcess',\n    Value: 'default'\n  }, {\n    Namespace: 'aws:elbv2:listener:443',\n    OptionName: 'ListenerEnabled',\n    Value: 'true'\n  }, {\n    Namespace: 'aws:elbv2:listener:443',\n    OptionName: 'Protocol',\n    Value: 'HTTPS'\n  }];\n\n  const domains = config.app.sslDomains;\n\n  if (!domains || domains.length === 0) {\n    await beanstalk.updateEnvironment({\n      EnvironmentName: environment,\n      // eslint-disable-next-line arrow-body-style\n      OptionsToRemove: ebConfig.map(({ Namespace, OptionName }) => {\n        return {\n          Namespace,\n          OptionName\n        };\n      })\n    }).promise();\n  } else {\n    let needToUpdate = false;\n\n    const {\n      ConfigurationSettings\n    } = await beanstalk.describeConfigurationSettings({\n      EnvironmentName: environment,\n      ApplicationName: app\n    }).promise();\n\n    const current = ConfigurationSettings[0].OptionSettings.reduce(convertToObject, {});\n    const desired = ebConfig.reduce(convertToObject, {});\n\n    Object.keys(desired).forEach((key) => {\n      if (needToUpdate || !current[key] || current[key].Value !== desired[key].Value) {\n        needToUpdate = true;\n      }\n    });\n\n    if (needToUpdate) {\n      await beanstalk.updateEnvironment({\n        EnvironmentName: environment,\n        OptionSettings: ebConfig\n      }).promise();\n      await waitForEnvReady(config, true);\n    }\n  }\n}\n"],"file":"certificates.js"}