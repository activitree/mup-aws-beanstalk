{"version":3,"sources":["../src/certificates.js"],"names":["beanstalk","names","convertToObject","waitForEnvReady","ensureSSLConfigured","config","certificateArn","app","environment","ebConfig","Namespace","OptionName","Value","domains","sslDomains","length","updateEnvironment","EnvironmentName","OptionsToRemove","map","promise","needToUpdate","ConfigurationSettings","describeConfigurationSettings","ApplicationName","current","OptionSettings","reduce","desired","Object","keys","forEach","key"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,SAASC,eAAT,QAAgC,aAAhC;AACA,SAASC,eAAT,QAAgC,aAAhC;AAEA,eAAe,eAAeC,mBAAf,CAAmCC,MAAnC,EAA2CC,cAA3C,EAA2D;AACxE,QAAM;AACJC,IAAAA,GADI;AAEJC,IAAAA;AAFI,MAGFP,KAAK,CAACI,MAAD,CAHT;AAKA,QAAMI,QAAQ,GAAG,CAAC;AAChBC,IAAAA,SAAS,EAAE,wBADK;AAEhBC,IAAAA,UAAU,EAAE,oBAFI;AAGhBC,IAAAA,KAAK,EAAEN;AAHS,GAAD,EAId;AACDI,IAAAA,SAAS,EAAE,wBADV;AAEDC,IAAAA,UAAU,EAAE,gBAFX;AAGDC,IAAAA,KAAK,EAAE;AAHN,GAJc,EAQd;AACDF,IAAAA,SAAS,EAAE,wBADV;AAEDC,IAAAA,UAAU,EAAE,iBAFX;AAGDC,IAAAA,KAAK,EAAE;AAHN,GARc,EAYd;AACDF,IAAAA,SAAS,EAAE,wBADV;AAEDC,IAAAA,UAAU,EAAE,UAFX;AAGDC,IAAAA,KAAK,EAAE;AAHN,GAZc,CAAjB;AAkBA,QAAMC,OAAO,GAAGR,MAAM,CAACE,GAAP,CAAWO,UAA3B;;AAEA,MAAI,CAACD,OAAD,IAAYA,OAAO,CAACE,MAAR,KAAmB,CAAnC,EAAsC;AACpC,UAAMf,SAAS,CAACgB,iBAAV,CAA4B;AAChCC,MAAAA,eAAe,EAAET,WADe;AAEhC;AACAU,MAAAA,eAAe,EAAET,QAAQ,CAACU,GAAT,CAAa,CAAC;AAAET,QAAAA,SAAF;AAAaC,QAAAA;AAAb,OAAD,KAA+B;AAC3D,eAAO;AACLD,UAAAA,SADK;AAELC,UAAAA;AAFK,SAAP;AAID,OALgB;AAHe,KAA5B,EASHS,OATG,EAAN;AAUD,GAXD,MAWO;AACL,QAAIC,YAAY,GAAG,KAAnB;AAEA,UAAM;AACJC,MAAAA;AADI,QAEF,MAAMtB,SAAS,CAACuB,6BAAV,CAAwC;AAChDN,MAAAA,eAAe,EAAET,WAD+B;AAEhDgB,MAAAA,eAAe,EAAEjB;AAF+B,KAAxC,EAGPa,OAHO,EAFV;AAOA,UAAMK,OAAO,GAAGH,qBAAqB,CAAC,CAAD,CAArB,CAAyBI,cAAzB,CAAwCC,MAAxC,CAA+CzB,eAA/C,EAAgE,EAAhE,CAAhB;AACA,UAAM0B,OAAO,GAAGnB,QAAQ,CAACkB,MAAT,CAAgBzB,eAAhB,EAAiC,EAAjC,CAAhB;AAEA2B,IAAAA,MAAM,CAACC,IAAP,CAAYF,OAAZ,EAAqBG,OAArB,CAA8BC,GAAD,IAAS;AACpC,UAAIX,YAAY,IAAI,CAACI,OAAO,CAACO,GAAD,CAAxB,IAAiCP,OAAO,CAACO,GAAD,CAAP,CAAapB,KAAb,KAAuBgB,OAAO,CAACI,GAAD,CAAP,CAAapB,KAAzE,EAAgF;AAC9ES,QAAAA,YAAY,GAAG,IAAf;AACD;AACF,KAJD;;AAMA,QAAIA,YAAJ,EAAkB;AAChB,YAAMrB,SAAS,CAACgB,iBAAV,CAA4B;AAChCC,QAAAA,eAAe,EAAET,WADe;AAEhCkB,QAAAA,cAAc,EAAEjB;AAFgB,OAA5B,EAGHW,OAHG,EAAN;AAIA,YAAMjB,eAAe,CAACE,MAAD,EAAS,IAAT,CAArB;AACD;AACF;AACF","sourcesContent":["import { beanstalk } from './aws';\nimport { names } from './utils';\nimport { convertToObject } from './eb-config';\nimport { waitForEnvReady } from './env-ready';\n\nexport default async function ensureSSLConfigured(config, certificateArn) {\n  const {\n    app,\n    environment\n  } = names(config);\n\n  const ebConfig = [{\n    Namespace: 'aws:elbv2:listener:443',\n    OptionName: 'SSLCertificateArns',\n    Value: certificateArn\n  }, {\n    Namespace: 'aws:elbv2:listener:443',\n    OptionName: 'DefaultProcess',\n    Value: 'default'\n  }, {\n    Namespace: 'aws:elbv2:listener:443',\n    OptionName: 'ListenerEnabled',\n    Value: 'true'\n  }, {\n    Namespace: 'aws:elbv2:listener:443',\n    OptionName: 'Protocol',\n    Value: 'HTTPS'\n  }];\n\n  const domains = config.app.sslDomains;\n\n  if (!domains || domains.length === 0) {\n    await beanstalk.updateEnvironment({\n      EnvironmentName: environment,\n      // eslint-disable-next-line arrow-body-style\n      OptionsToRemove: ebConfig.map(({ Namespace, OptionName }) => {\n        return {\n          Namespace,\n          OptionName\n        };\n      })\n    }).promise();\n  } else {\n    let needToUpdate = false;\n\n    const {\n      ConfigurationSettings\n    } = await beanstalk.describeConfigurationSettings({\n      EnvironmentName: environment,\n      ApplicationName: app\n    }).promise();\n\n    const current = ConfigurationSettings[0].OptionSettings.reduce(convertToObject, {});\n    const desired = ebConfig.reduce(convertToObject, {});\n\n    Object.keys(desired).forEach((key) => {\n      if (needToUpdate || !current[key] || current[key].Value !== desired[key].Value) {\n        needToUpdate = true;\n      }\n    });\n\n    if (needToUpdate) {\n      await beanstalk.updateEnvironment({\n        EnvironmentName: environment,\n        OptionSettings: ebConfig\n      }).promise();\n      await waitForEnvReady(config, true);\n    }\n  }\n}\n"],"file":"certificates.js"}