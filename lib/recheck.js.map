{"version":3,"sources":["../src/recheck.js"],"names":["throttlingExceptionCounter","getRecheckInterval","Error","checkForThrottlingException","exception","code","message","handleThrottlingException","console","log"],"mappings":";;;;;;;;AAAA,IAAIA,0BAA0B,GAAG,CAAjC;;AAEO,SAASC,kBAAT,GAA8B;AACnC,MAAID,0BAA0B,KAAK,EAAnC,EAAuC;AACrC,UAAM,IAAIE,KAAJ,CAAU,qCAAV,CAAN;AACD,GAFD,MAEO;AACL,WAAQ,YAAKF,0BAAL,IAAkC,IAA1C;AACD;AACF;;AAEM,SAASG,2BAAT,CAAqCC,SAArC,EAAgD;AACrD,SAAQA,SAAS,IAAKA,SAAS,CAACC,IAAV,KAAmB,YAAjC,IAAmDD,SAAS,CAACE,OAAV,KAAsB,eAAjF;AACD;;AAEM,SAASC,yBAAT,GAAqC;AAC1CP,EAAAA,0BAA0B;AAC1BQ,EAAAA,OAAO,CAACC,GAAR,4CAAgDR,kBAAkB,EAAlE;AACD","sourcesContent":["let throttlingExceptionCounter = 0;\n\nexport function getRecheckInterval() {\n  if (throttlingExceptionCounter === 10) {\n    throw new Error('Maximum throttling backoff exceeded');\n  } else {\n    return (2 ** throttlingExceptionCounter * 3000);\n  }\n}\n\nexport function checkForThrottlingException(exception) {\n  return (exception && (exception.code === 'Throttling') && (exception.message === 'Rate exceeded'));\n}\n\nexport function handleThrottlingException() {\n  throttlingExceptionCounter++;\n  console.log(`Setting new re-check interval to ${getRecheckInterval()}ms`);\n}\n"],"file":"recheck.js"}