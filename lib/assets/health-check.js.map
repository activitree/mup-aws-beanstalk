{"version":3,"sources":["../../src/assets/health-check.js"],"names":["http","require","debugEnabled","process","env","HEALTH_CHECK_VERBOSE","log","message","debug","console","Date","server","createServer","request","response","timeout","appRequest","get","res","statusCode","end","clearTimeout","resume","on","e","setTimeout","abort","listen"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AAEA,IAAIC,YAAY,GAAGC,OAAO,CAACC,GAAR,CAAYC,oBAAZ,KAAqC,MAAxD;;AAEA,IAAIC,GAAG,GAAG,SAASA,GAAT,CAAaC,OAAb,EAAsBC,KAAtB,EAA6B;AACrC,MAAI,CAACA,KAAD,IAAUN,YAAd,EAA4B;AAC1BO,IAAAA,OAAO,CAACH,GAAR,CAAY,mBAAmB,IAAII,IAAJ,EAAnB,GAAgC,IAAhC,GAAuCH,OAAnD;AACD;AACF,CAJD;;AAOA,IAAII,MAAM,GAAGX,IAAI,CAACY,YAAL,CAAkB,UAAUC,OAAV,EAAmBC,QAAnB,EAA6B;AAC1D,MAAIC,OAAJ;AACA,MAAIC,UAAJ;AAEAV,EAAAA,GAAG,CAAC,+BAAD,EAAkC,IAAlC,CAAH;AAEAU,EAAAA,UAAU,GAAGhB,IAAI,CAACiB,GAAL,CAAS,uBAAT,EAAkC,UAAUC,GAAV,EAAe;AAC5DZ,IAAAA,GAAG,CAAC,wBAAD,EAA2B,IAA3B,CAAH;AACAQ,IAAAA,QAAQ,CAACK,UAAT,GAAsB,GAAtB;AACAL,IAAAA,QAAQ,CAACM,GAAT,CAAa,SAAb;AACAC,IAAAA,YAAY,CAACN,OAAD,CAAZ;AACAG,IAAAA,GAAG,CAACI,MAAJ;AACD,GANY,EAMVC,EANU,CAMP,OANO,EAME,UAAUC,CAAV,EAAa;AAC1BlB,IAAAA,GAAG,CAAC,2BAA2BkB,CAA5B,CAAH;AACAV,IAAAA,QAAQ,CAACK,UAAT,GAAsB,GAAtB;AACAL,IAAAA,QAAQ,CAACM,GAAT,CAAa,QAAb;AACAC,IAAAA,YAAY,CAACN,OAAD,CAAZ;AACD,GAXY,CAAb;AAaAA,EAAAA,OAAO,GAAGU,UAAU,CAAC,YAAY;AAC/BnB,IAAAA,GAAG,CAAC,0CAAD,CAAH;AACAU,IAAAA,UAAU,CAACU,KAAX;AACD,GAHmB,EAGjB,IAHiB,CAApB;AAID,CAvBY,CAAb;;AA0BA,IAAI;AACFf,EAAAA,MAAM,CAACgB,MAAP,CAAc,IAAd;AACArB,EAAAA,GAAG,CAAC,6BAAD,EAAgC,IAAhC,CAAH;AACD,CAHD,CAGE,OAAOkB,CAAP,EAAU;AACV;AACAlB,EAAAA,GAAG,CAAC,iBAAD,CAAH;AACD","sourcesContent":["/* eslint-disable no-var, prefer-template, func-names, prefer-arrow-callback */\n\n/*\n * The health check expects the response's status code to be 200\n * Some apps set their status code to something else, which would\n * cause the health check to always fail.\n *\n * The health check gets sent to this server, which checks if\n * the app is responding to requests, and then sets the correct\n * status code for the health check.\n *\n * This uses the same version of node that the app is using,\n * so it needs to support Node 0.10.\n */\n\nvar http = require('http');\n\nvar debugEnabled = process.env.HEALTH_CHECK_VERBOSE === 'true';\n\nvar log = function log(message, debug) {\n  if (!debug || debugEnabled) {\n    console.log('[HealthCheck] ' + new Date() + ': ' + message);\n  }\n};\n\n\nvar server = http.createServer(function (request, response) {\n  var timeout;\n  var appRequest;\n\n  log('Received health check request', true);\n\n  appRequest = http.get('http://127.0.0.1:8081', function (res) {\n    log('Health check succeeded', true);\n    response.statusCode = 200;\n    response.end('Success');\n    clearTimeout(timeout);\n    res.resume();\n  }).on('error', function (e) {\n    log('Request to app failed ' + e);\n    response.statusCode = 500;\n    response.end('Failed');\n    clearTimeout(timeout);\n  });\n\n  timeout = setTimeout(function () {\n    log('Request to app timed out after 3 seconds');\n    appRequest.abort();\n  }, 3000);\n});\n\n\ntry {\n  server.listen(8039);\n  log('Started health check server', true);\n} catch (e) {\n  // Port is being used, likely from another health-check server running\n  log('Port being used');\n}\n"],"file":"health-check.js"}