{"version":3,"sources":["../src/versions.js"],"names":["difference","beanstalk","s3","names","ebVersions","api","config","getConfig","versions","app","appVersions","describeApplicationVersions","ApplicationName","promise","ApplicationVersions","length","forEach","VersionLabel","parsedVersion","parseInt","push","sort","a","b","s3Versions","prefix","bucket","bundlePrefix","uploadedBundles","listObjectsV2","Bucket","Prefix","Contents","bundle","bundleVersion","Key","split","largestVersion","version","appVersion","largestEnvVersion","bucketName","oldEnvVersions","keep","slice","oldVersions","bundleVersions","oldBundleVersions","oldAppVersions","bundles"],"mappings":"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","sourcesContent":["import { difference } from 'lodash';\nimport {\n  beanstalk,\n  s3\n} from './aws';\nimport { names } from './utils';\n\nexport async function ebVersions(api) {\n  const config = api.getConfig();\n  const versions = [0];\n  const {\n    app\n  } = names(config);\n\n  const appVersions = await beanstalk.describeApplicationVersions({\n    ApplicationName: app\n  }).promise();\n\n  if (appVersions.ApplicationVersions.length > 0) {\n    appVersions.ApplicationVersions.forEach(({\n      VersionLabel\n    }) => {\n      const parsedVersion = parseInt(VersionLabel, 10);\n\n      versions.push(parsedVersion);\n    });\n  }\n\n  return versions.sort((a, b) => b - a);\n}\n\nexport async function s3Versions(api, prefix) {\n  const config = api.getConfig();\n  const versions = [0];\n  const {\n    bucket,\n    bundlePrefix\n  } = names(config);\n  prefix = prefix || bundlePrefix;\n\n  const uploadedBundles = await s3.listObjectsV2({\n    Bucket: bucket,\n    Prefix: prefix\n  }).promise();\n\n\n  if (uploadedBundles.Contents.length > 0) {\n    uploadedBundles.Contents.forEach((bundle) => {\n      const bundleVersion = parseInt(bundle.Key.split(prefix)[1], 10);\n\n      versions.push(bundleVersion);\n    });\n  }\n\n  return versions.sort((a, b) => b - a);\n}\n\nexport async function largestVersion(api) {\n  let [version] = await s3Versions(api);\n  const [appVersion] = await ebVersions(api);\n\n  if (appVersion > version) {\n    version = appVersion;\n  }\n\n  return version;\n}\n\nexport async function largestEnvVersion(api) {\n  const versions = [0];\n  const prefix = 'env/';\n  const config = api.getConfig();\n\n  const {\n    bucket: bucketName\n  } = names(config);\n\n  const uploadedBundles = await s3.listObjectsV2({\n    Bucket: bucketName,\n    Prefix: prefix\n  }).promise();\n\n\n  if (uploadedBundles.Contents.length > 0) {\n    uploadedBundles.Contents.forEach((bundle) => {\n      const bundleVersion = parseInt(bundle.Key.split(prefix)[1], 10);\n\n      versions.push(bundleVersion);\n    });\n  }\n\n  return versions.sort((a, b) => b - a)[0];\n}\n\nexport async function oldEnvVersions(api) {\n  const keep = 10;\n  const versions = await s3Versions(api, 'env/');\n\n  return versions.slice(keep);\n}\n\nexport async function oldVersions(api) {\n  const keep = api.getConfig().app.oldVersions;\n  const appVersions = await ebVersions(api);\n  const bundleVersions = await s3Versions(api);\n\n  // find unused bundles\n  const oldBundleVersions = difference(bundleVersions, appVersions);\n\n  // keep the 3 newest versions\n  const oldAppVersions = appVersions.slice(keep);\n  return {\n    bundles: oldBundleVersions,\n    versions: oldAppVersions\n  };\n}\n"],"file":"versions.js"}