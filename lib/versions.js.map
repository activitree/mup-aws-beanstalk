{"version":3,"sources":["../src/versions.js"],"names":["ebVersions","api","config","getConfig","versions","app","beanstalk","describeApplicationVersions","ApplicationName","promise","appVersions","ApplicationVersions","length","forEach","VersionLabel","parsedVersion","parseInt","push","sort","a","b","s3Versions","prefix","bucket","bundlePrefix","s3","listObjectsV2","Bucket","Prefix","uploadedBundles","Contents","bundle","bundleVersion","Key","split","largestVersion","version","appVersion","largestEnvVersion","bucketName","oldEnvVersions","keep","slice","oldVersions","bundleVersions","oldBundleVersions","oldAppVersions","bundles"],"mappings":"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","sourcesContent":["import { difference } from 'lodash';\nimport {\n  beanstalk,\n  s3\n} from './aws';\nimport { names } from './utils';\n\nexport async function ebVersions(api) {\n  const config = api.getConfig();\n  const versions = [0];\n  const {\n    app\n  } = names(config);\n\n  const appVersions = await beanstalk.describeApplicationVersions({\n    ApplicationName: app\n  }).promise();\n\n  if (appVersions.ApplicationVersions.length > 0) {\n    appVersions.ApplicationVersions.forEach(({\n      VersionLabel\n    }) => {\n      const parsedVersion = parseInt(VersionLabel, 10);\n\n      versions.push(parsedVersion);\n    });\n  }\n\n  return versions.sort((a, b) => b - a);\n}\n\nexport async function s3Versions(api, prefix) {\n  const config = api.getConfig();\n  const versions = [0];\n  const {\n    bucket,\n    bundlePrefix\n  } = names(config);\n  prefix = prefix || bundlePrefix;\n\n  const uploadedBundles = await s3.listObjectsV2({\n    Bucket: bucket,\n    Prefix: prefix\n  }).promise();\n\n\n  if (uploadedBundles.Contents.length > 0) {\n    uploadedBundles.Contents.forEach((bundle) => {\n      const bundleVersion = parseInt(bundle.Key.split(prefix)[1], 10);\n\n      versions.push(bundleVersion);\n    });\n  }\n\n  return versions.sort((a, b) => b - a);\n}\n\nexport async function largestVersion(api) {\n  let [version] = await s3Versions(api);\n  const [appVersion] = await ebVersions(api);\n\n  if (appVersion > version) {\n    version = appVersion;\n  }\n\n  return version;\n}\n\nexport async function largestEnvVersion(api) {\n  const versions = [0];\n  const prefix = 'env/';\n  const config = api.getConfig();\n\n  const {\n    bucket: bucketName\n  } = names(config);\n\n  const uploadedBundles = await s3.listObjectsV2({\n    Bucket: bucketName,\n    Prefix: prefix\n  }).promise();\n\n\n  if (uploadedBundles.Contents.length > 0) {\n    uploadedBundles.Contents.forEach((bundle) => {\n      const bundleVersion = parseInt(bundle.Key.split(prefix)[1], 10);\n\n      versions.push(bundleVersion);\n    });\n  }\n\n  return versions.sort((a, b) => b - a)[0];\n}\n\nexport async function oldEnvVersions(api) {\n  const keep = 10;\n  const versions = await s3Versions(api, 'env/');\n\n  return versions.slice(keep);\n}\n\nexport async function oldVersions(api) {\n  const keep = api.getConfig().app.oldVersions;\n  const appVersions = await ebVersions(api);\n  const bundleVersions = await s3Versions(api);\n\n  // find unused bundles\n  const oldBundleVersions = difference(bundleVersions, appVersions);\n\n  // keep the 3 newest versions\n  const oldAppVersions = appVersions.slice(keep);\n  return {\n    bundles: oldBundleVersions,\n    versions: oldAppVersions\n  };\n}\n"],"file":"versions.js"}